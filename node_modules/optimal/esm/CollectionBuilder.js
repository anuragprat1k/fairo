import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Builder from './Builder';

var CollectionBuilder = function (_Builder) {
  _inherits(CollectionBuilder, _Builder);

  function CollectionBuilder(type) {
    var _this;

    var contents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    _classCallCheck(this, CollectionBuilder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollectionBuilder).call(this, type, defaultValue));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "contents", null);

    if ("production" !== process.env.NODE_ENV) {
      if (contents) {
        if (contents instanceof Builder) {
          _this.contents = contents;

          _this.addCheck(_this.checkContents, contents);
        } else {
          _this.invariant(false, "A blueprint is required for ".concat(type, " contents."));
        }
      }
    }

    return _this;
  }

  _createClass(CollectionBuilder, [{
    key: "checkContents",
    value: function checkContents(path, value, contents) {
      var _this2 = this;

      if ("production" !== process.env.NODE_ENV) {
        if (this.type === 'array') {
          value.forEach(function (item, i) {
            contents.runChecks("".concat(path, "[").concat(i, "]"), item, _this2.currentStruct, _this2.options);
          });
        } else if (this.type === 'object') {
          Object.keys(value).forEach(function (key) {
            contents.runChecks("".concat(path, ".").concat(key), value[key], _this2.currentStruct, _this2.options);
          });
        }
      }
    }
  }, {
    key: "notEmpty",
    value: function notEmpty() {
      return this.addCheck(this.checkNotEmpty);
    }
  }, {
    key: "checkNotEmpty",
    value: function checkNotEmpty(path, value) {
      if ("production" !== process.env.NODE_ENV) {
        if (this.type === 'array') {
          this.invariant(value.length > 0, 'Array cannot be empty.', path);
        } else if (this.type === 'object') {
          this.invariant(Object.keys(value).length > 0, 'Object cannot be empty.', path);
        }
      }
    }
  }, {
    key: "typeAlias",
    value: function typeAlias() {
      var contents = this.contents;

      var alias = _get(_getPrototypeOf(CollectionBuilder.prototype), "typeAlias", this).call(this);

      return contents ? "".concat(alias, "<").concat(contents.typeAlias(), ">") : alias;
    }
  }]);

  return CollectionBuilder;
}(Builder);

export { CollectionBuilder as default };
export function array() {
  var contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return new CollectionBuilder('array', contents, defaultValue);
}
export function object() {
  var contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new CollectionBuilder('object', contents, defaultValue);
}