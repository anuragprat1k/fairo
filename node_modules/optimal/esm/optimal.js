import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Builder from './Builder';
import isObject from './isObject';
import typeOf from './typeOf';

function buildAndCheck(struct, blueprint) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

  var unknownFields = _objectSpread({}, struct);

  var builtStruct = {};
  Object.keys(blueprint).forEach(function (key) {
    var builder = blueprint[key];
    var path = parentPath ? "".concat(parentPath, ".").concat(key) : key;

    if (builder instanceof Builder) {
      builtStruct[key] = builder.runChecks(path, struct[key], struct, options);
    } else if (isObject(builder)) {
      builtStruct[key] = buildAndCheck(struct[key] || {}, builder, options, path);
    } else if ("production" !== process.env.NODE_ENV) {
      throw new Error('Unknown blueprint. Must be a builder or plain object.');
    }

    delete unknownFields[key];
  });

  if (options.unknown) {
    Object.assign(builtStruct, unknownFields);
  } else if ("production" !== process.env.NODE_ENV) {
    var unknownKeys = Object.keys(unknownFields);

    if (unknownKeys.length > 0) {
      throw new Error("Unknown fields: ".concat(unknownKeys.join(', '), "."));
    }
  }

  return builtStruct;
}

export default function optimal(struct, blueprint) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if ("production" !== process.env.NODE_ENV) {
    if (!isObject(struct)) {
      throw new TypeError("Optimal requires a plain object, found ".concat(typeOf(struct), "."));
    } else if (!isObject(options)) {
      throw new TypeError('Optimal options must be a plain object.');
    } else if (!isObject(blueprint)) {
      throw new TypeError('A blueprint is required.');
    }
  }

  return buildAndCheck(struct, blueprint, options);
}