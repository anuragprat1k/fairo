import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Builder from './Builder';
import typeOf from './typeOf';

var UnionBuilder = function (_Builder) {
  _inherits(UnionBuilder, _Builder);

  function UnionBuilder(builders) {
    var _this;

    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, UnionBuilder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(UnionBuilder).call(this, 'union', defaultValue));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "builders", []);

    if ("production" !== process.env.NODE_ENV) {
      _this.invariant(Array.isArray(builders) && builders.length > 0 && builders.every(function (builder) {
        return builder instanceof Builder;
      }), 'A non-empty array of blueprints are required for a union.');

      _this.builders = builders;

      _this.addCheck(_this.checkUnions, builders);
    }

    return _this;
  }

  _createClass(UnionBuilder, [{
    key: "checkUnions",
    value: function checkUnions(path, value, builders) {
      var _this2 = this;

      if ("production" !== process.env.NODE_ENV) {
        var usage = {};
        var keys = [];
        var type = typeOf(value);
        builders.forEach(function (builder) {
          if (usage[builder.type]) {
            _this2.invariant(false, "Multiple instances of \"".concat(builder.type, "\" are not supported."), path);
          } else if (builder.type === 'union') {
            _this2.invariant(false, 'Nested unions are not supported.', path);
          } else {
            usage[builder.type] = true;
            keys.push(builder.typeAlias());
          }
        });

        if (usage.shape && usage.object) {
          this.invariant(false, 'Objects and shapes within the same union are not supported.', path);
        }

        var checked = false;
        builders.forEach(function (builder) {
          if (type === builder.type || type === 'object' && builder.type === 'shape' || builder.type === 'custom') {
            checked = true;
            builder.runChecks(path, value, _this2.currentStruct, _this2.options);
          }
        });
        this.invariant(checked, "Type must be one of: ".concat(keys.join(', ')), path);
      }
    }
  }, {
    key: "typeAlias",
    value: function typeAlias() {
      return this.builders.map(function (builder) {
        return builder.typeAlias();
      }).join(' | ');
    }
  }]);

  return UnionBuilder;
}(Builder);

export { UnionBuilder as default };
export function union(builders) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return new UnionBuilder(builders, defaultValue);
}