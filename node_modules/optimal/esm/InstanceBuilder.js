import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Builder from './Builder';
import isObject from './isObject';

var InstanceBuilder = function (_Builder) {
  _inherits(InstanceBuilder, _Builder);

  function InstanceBuilder() {
    var _this;

    var refClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    _classCallCheck(this, InstanceBuilder);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(InstanceBuilder).call(this, 'instance', null));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "refClass", null);

    _this.nullable();

    if ("production" !== process.env.NODE_ENV) {
      if (refClass) {
        _this.invariant(typeof refClass === 'function', 'A class reference is required.');
      }

      _this.refClass = refClass;

      _this.addCheck(_this.checkInstance, refClass);
    }

    return _this;
  }

  _createClass(InstanceBuilder, [{
    key: "checkInstance",
    value: function checkInstance(path, value, refClass) {
      if ("production" !== process.env.NODE_ENV) {
        if (refClass) {
          this.invariant(typeof refClass === 'function' && value instanceof refClass, "Must be an instance of \"".concat(this.typeAlias(), "\"."), path);
        } else {
          this.invariant(isObject(value) && value.constructor !== Object, 'Must be a class instance.', path);
        }
      }
    }
  }, {
    key: "typeAlias",
    value: function typeAlias() {
      var refClass = this.refClass;
      return refClass ? refClass.name || refClass.constructor.name : 'class';
    }
  }]);

  return InstanceBuilder;
}(Builder);

export { InstanceBuilder as default };
export function instance() {
  var refClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return new InstanceBuilder(refClass);
}
export function regex() {
  return instance(RegExp);
}
export function date() {
  return instance(Date);
}