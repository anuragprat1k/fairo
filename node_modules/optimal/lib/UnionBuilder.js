"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.union = union;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Builder2 = _interopRequireDefault(require("./Builder"));

var _typeOf = _interopRequireDefault(require("./typeOf"));

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var UnionBuilder = function (_Builder) {
  (0, _inherits2.default)(UnionBuilder, _Builder);

  function UnionBuilder(builders) {
    var _this;

    var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck2.default)(this, UnionBuilder);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(UnionBuilder).call(this, 'union', defaultValue));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "builders", []);

    if ("production" !== process.env.NODE_ENV) {
      _this.invariant(Array.isArray(builders) && builders.length > 0 && builders.every(function (builder) {
        return builder instanceof _Builder2.default;
      }), 'A non-empty array of blueprints are required for a union.');

      _this.builders = builders;

      _this.addCheck(_this.checkUnions, builders);
    }

    return _this;
  }

  (0, _createClass2.default)(UnionBuilder, [{
    key: "checkUnions",
    value: function checkUnions(path, value, builders) {
      var _this2 = this;

      if ("production" !== process.env.NODE_ENV) {
        var usage = {};
        var keys = [];
        var type = (0, _typeOf.default)(value);
        builders.forEach(function (builder) {
          if (usage[builder.type]) {
            _this2.invariant(false, "Multiple instances of \"".concat(builder.type, "\" are not supported."), path);
          } else if (builder.type === 'union') {
            _this2.invariant(false, 'Nested unions are not supported.', path);
          } else {
            usage[builder.type] = true;
            keys.push(builder.typeAlias());
          }
        });

        if (usage.shape && usage.object) {
          this.invariant(false, 'Objects and shapes within the same union are not supported.', path);
        }

        var checked = false;
        builders.forEach(function (builder) {
          if (type === builder.type || type === 'object' && builder.type === 'shape' || builder.type === 'custom') {
            checked = true;
            builder.runChecks(path, value, _this2.currentStruct, _this2.options);
          }
        });
        this.invariant(checked, "Type must be one of: ".concat(keys.join(', ')), path);
      }
    }
  }, {
    key: "typeAlias",
    value: function typeAlias() {
      return this.builders.map(function (builder) {
        return builder.typeAlias();
      }).join(' | ');
    }
  }]);
  return UnionBuilder;
}(_Builder2.default);

exports.default = UnionBuilder;

function union(builders) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return new UnionBuilder(builders, defaultValue);
}