"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = optimal;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _Builder = _interopRequireDefault(require("./Builder"));

var _isObject = _interopRequireDefault(require("./isObject"));

var _typeOf = _interopRequireDefault(require("./typeOf"));

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
function buildAndCheck(struct, blueprint) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  var unknownFields = (0, _objectSpread2.default)({}, struct);
  var builtStruct = {};
  Object.keys(blueprint).forEach(function (key) {
    var builder = blueprint[key];
    var path = parentPath ? "".concat(parentPath, ".").concat(key) : key;

    if (builder instanceof _Builder.default) {
      builtStruct[key] = builder.runChecks(path, struct[key], struct, options);
    } else if ((0, _isObject.default)(builder)) {
      builtStruct[key] = buildAndCheck(struct[key] || {}, builder, options, path);
    } else if ("production" !== process.env.NODE_ENV) {
      throw new Error('Unknown blueprint. Must be a builder or plain object.');
    }

    delete unknownFields[key];
  });

  if (options.unknown) {
    Object.assign(builtStruct, unknownFields);
  } else if ("production" !== process.env.NODE_ENV) {
    var unknownKeys = Object.keys(unknownFields);

    if (unknownKeys.length > 0) {
      throw new Error("Unknown fields: ".concat(unknownKeys.join(', '), "."));
    }
  }

  return builtStruct;
}

function optimal(struct, blueprint) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if ("production" !== process.env.NODE_ENV) {
    if (!(0, _isObject.default)(struct)) {
      throw new TypeError("Optimal requires a plain object, found ".concat((0, _typeOf.default)(struct), "."));
    } else if (!(0, _isObject.default)(options)) {
      throw new TypeError('Optimal options must be a plain object.');
    } else if (!(0, _isObject.default)(blueprint)) {
      throw new TypeError('A blueprint is required.');
    }
  }

  return buildAndCheck(struct, blueprint, options);
}