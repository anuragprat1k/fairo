/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import { SupportedType, CheckerCallback, CustomCallback, OptimalOptions, Struct } from './types';
export interface Check {
    args: any[];
    callback: CheckerCallback;
}
export default class Builder<T> {
    checks: Check[];
    currentStruct: Struct;
    defaultValue: T;
    deprecatedMessage: string;
    errorMessage: string;
    isNullable: boolean;
    isRequired: boolean;
    options: OptimalOptions;
    type: SupportedType;
    constructor(type: SupportedType, defaultValue: T);
    /**
     * Add a checking function with optional arguments.
     */
    addCheck(checker: CheckerCallback, ...args: any[]): this;
    /**
     * Map a list of names that must be defined alongside this field.
     */
    and(...keys: string[]): this;
    /**
     * Validate that all fields have been defined.
     */
    checkAnd(path: string, value: any, otherKeys: string[]): void;
    /**
     * Validate the type of value.
     */
    checkType(path: string, value: any): void;
    /**
     * Set a callback to run custom logic.
     */
    custom(callback: CustomCallback): this;
    /**
     * Validate the value using a custom callback.
     */
    checkCustom(path: string, value: any, callback: CustomCallback): void;
    /**
     * Set a message to log when this field is present.
     */
    deprecate(message: string): this;
    /**
     * Throw an error if the condition is falsy.
     */
    invariant(condition: boolean, message: string, path?: string): void;
    /**
     * Return the current key from a path.
     */
    key(path: string): string;
    /**
     * Set a custom error message for all checks.
     */
    message(message: string): this;
    /**
     * Allow null values.
     */
    nullable(state?: boolean): this;
    /**
     * Mark a field as only the default value can be used.
     */
    only(): this;
    /**
     * Validate the value matches only the default value.
     */
    checkOnly(path: string, value: any): void;
    /**
     * Map a list of field names that must have at least 1 defined.
     */
    or(...keys: string[]): this;
    /**
     * Validate that at least 1 field is defined.
     */
    checkOr(path: string, value: any, otherKeys: string[]): void;
    /**
     * Disallow undefined values.
     */
    required(state?: boolean): this;
    /**
     * Run all validation checks that have been enqueued.
     */
    runChecks(path: string, initialValue: any, struct: Struct, options?: OptimalOptions): any;
    /**
     * Return a human readable type name.
     */
    typeAlias(): string;
    /**
     * Map a list of field names that must not be defined alongside this field.
     */
    xor(...keys: string[]): this;
    /**
     * Validate that only 1 field is defined.
     */
    checkXor(path: string, value: any, otherKeys: string[]): void;
}
export declare function bool(defaultValue?: boolean | null): Builder<boolean | null>;
export declare function custom<T>(callback: CustomCallback, defaultValue?: T | null): Builder<T | null>;
export declare function func(defaultValue?: Function | null): Builder<Function | null>;
