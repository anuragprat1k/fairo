"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.number = number;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _Builder2 = _interopRequireDefault(require("./Builder"));

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
function isNumber(value) {
  return typeof value === 'number';
}

var NumberBuilder = function (_Builder) {
  (0, _inherits2.default)(NumberBuilder, _Builder);

  function NumberBuilder() {
    var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    (0, _classCallCheck2.default)(this, NumberBuilder);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(NumberBuilder).call(this, 'number', defaultValue));
  }

  (0, _createClass2.default)(NumberBuilder, [{
    key: "between",
    value: function between(min, max) {
      var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(isNumber(min) && isNumber(max), 'Between requires a minimum and maximum number.');
      }

      return this.addCheck(this.checkBetween, min, max, inclusive);
    }
  }, {
    key: "checkBetween",
    value: function checkBetween(path, value, min, max) {
      var inclusive = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(isNumber(value) && (inclusive ? value >= min && value <= max : value > min && value < max), "Number must be between ".concat(min, " and ").concat(max).concat(inclusive ? ' inclusive' : '', "."), path);
      }
    }
  }, {
    key: "gt",
    value: function gt(min) {
      var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(isNumber(min), 'Greater-than requires a minimum number.');
      }

      return this.addCheck(this.checkGreaterThan, min, inclusive);
    }
  }, {
    key: "gte",
    value: function gte(min) {
      return this.gt(min, true);
    }
  }, {
    key: "checkGreaterThan",
    value: function checkGreaterThan(path, value, min) {
      var inclusive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if ("production" !== process.env.NODE_ENV) {
        if (inclusive) {
          this.invariant(isNumber(value) && value >= min, "Number must be greater than or equal to ".concat(min, "."), path);
        } else {
          this.invariant(isNumber(value) && value > min, "Number must be greater than ".concat(min, "."), path);
        }
      }
    }
  }, {
    key: "lt",
    value: function lt(max) {
      var inclusive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(isNumber(max), 'Less-than requires a maximum number.');
      }

      return this.addCheck(this.checkLessThan, max, inclusive);
    }
  }, {
    key: "lte",
    value: function lte(max) {
      return this.lt(max, true);
    }
  }, {
    key: "checkLessThan",
    value: function checkLessThan(path, value, max) {
      var inclusive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      if ("production" !== process.env.NODE_ENV) {
        if (inclusive) {
          this.invariant(isNumber(value) && value <= max, "Number must be less than or equal to ".concat(max, "."), path);
        } else {
          this.invariant(isNumber(value) && value < max, "Number must be less than ".concat(max, "."), path);
        }
      }
    }
  }, {
    key: "oneOf",
    value: function oneOf(list) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(Array.isArray(list) && list.length > 0 && list.every(function (item) {
          return isNumber(item);
        }), 'One of requires a non-empty array of numbers.');
      }

      return this.addCheck(this.checkOneOf, list);
    }
  }, {
    key: "checkOneOf",
    value: function checkOneOf(path, value, list) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(list.indexOf(value) >= 0, "Number must be one of: ".concat(list.join(', ')), path);
      }
    }
  }]);
  return NumberBuilder;
}(_Builder2.default);

exports.default = NumberBuilder;

function number() {
  var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return new NumberBuilder(defaultValue);
}