"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.array = array;
exports.object = object;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Builder2 = _interopRequireDefault(require("./Builder"));

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var CollectionBuilder = function (_Builder) {
  (0, _inherits2.default)(CollectionBuilder, _Builder);

  function CollectionBuilder(type) {
    var _this;

    var contents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    (0, _classCallCheck2.default)(this, CollectionBuilder);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(CollectionBuilder).call(this, type, defaultValue));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "contents", null);

    if ("production" !== process.env.NODE_ENV) {
      if (contents) {
        if (contents instanceof _Builder2.default) {
          _this.contents = contents;

          _this.addCheck(_this.checkContents, contents);
        } else {
          _this.invariant(false, "A blueprint is required for ".concat(type, " contents."));
        }
      }
    }

    return _this;
  }

  (0, _createClass2.default)(CollectionBuilder, [{
    key: "checkContents",
    value: function checkContents(path, value, contents) {
      var _this2 = this;

      if ("production" !== process.env.NODE_ENV) {
        if (this.type === 'array') {
          value.forEach(function (item, i) {
            contents.runChecks("".concat(path, "[").concat(i, "]"), item, _this2.currentStruct, _this2.options);
          });
        } else if (this.type === 'object') {
          Object.keys(value).forEach(function (key) {
            contents.runChecks("".concat(path, ".").concat(key), value[key], _this2.currentStruct, _this2.options);
          });
        }
      }
    }
  }, {
    key: "notEmpty",
    value: function notEmpty() {
      return this.addCheck(this.checkNotEmpty);
    }
  }, {
    key: "checkNotEmpty",
    value: function checkNotEmpty(path, value) {
      if ("production" !== process.env.NODE_ENV) {
        if (this.type === 'array') {
          this.invariant(value.length > 0, 'Array cannot be empty.', path);
        } else if (this.type === 'object') {
          this.invariant(Object.keys(value).length > 0, 'Object cannot be empty.', path);
        }
      }
    }
  }, {
    key: "typeAlias",
    value: function typeAlias() {
      var contents = this.contents;
      var alias = (0, _get2.default)((0, _getPrototypeOf2.default)(CollectionBuilder.prototype), "typeAlias", this).call(this);
      return contents ? "".concat(alias, "<").concat(contents.typeAlias(), ">") : alias;
    }
  }]);
  return CollectionBuilder;
}(_Builder2.default);

exports.default = CollectionBuilder;

function array() {
  var contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return new CollectionBuilder('array', contents, defaultValue);
}

function object() {
  var contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return new CollectionBuilder('object', contents, defaultValue);
}