"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bool = bool;
exports.custom = custom;
exports.func = func;
exports.default = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _isObject = _interopRequireDefault(require("./isObject"));

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
var Builder = function () {
  function Builder(type, defaultValue) {
    (0, _classCallCheck2.default)(this, Builder);
    (0, _defineProperty2.default)(this, "checks", []);
    (0, _defineProperty2.default)(this, "currentStruct", {});
    (0, _defineProperty2.default)(this, "defaultValue", void 0);
    (0, _defineProperty2.default)(this, "deprecatedMessage", '');
    (0, _defineProperty2.default)(this, "errorMessage", '');
    (0, _defineProperty2.default)(this, "isNullable", false);
    (0, _defineProperty2.default)(this, "isRequired", false);
    (0, _defineProperty2.default)(this, "options", {});
    (0, _defineProperty2.default)(this, "type", void 0);

    if ("production" !== process.env.NODE_ENV) {
      this.invariant(typeof defaultValue !== 'undefined', "A default value for type \"".concat(type, "\" is required."));
      this.addCheck(this.checkType);
    }

    this.defaultValue = defaultValue;
    this.type = type;
  }

  (0, _createClass2.default)(Builder, [{
    key: "addCheck",
    value: function addCheck(checker) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if ("production" !== process.env.NODE_ENV) {
        this.checks.push({
          args: args,
          callback: checker
        });
      }

      return this;
    }
  }, {
    key: "and",
    value: function and() {
      for (var _len2 = arguments.length, keys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        keys[_key2] = arguments[_key2];
      }

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(keys.length > 0, 'AND requires a list of field names.');
      }

      return this.addCheck(this.checkAnd, keys);
    }
  }, {
    key: "checkAnd",
    value: function checkAnd(path, value, otherKeys) {
      if ("production" !== process.env.NODE_ENV) {
        var keys = [this.key(path)].concat((0, _toConsumableArray2.default)(otherKeys));
        var struct = this.currentStruct;
        var undefs = keys.filter(function (key) {
          return typeof struct[key] === 'undefined' || struct[key] === null;
        });

        if (undefs.length === keys.length) {
          return;
        }

        this.invariant(undefs.length === 0, "All of these fields must be defined: ".concat(keys.join(', ')));
      }
    }
  }, {
    key: "checkType",
    value: function checkType(path, value) {
      if ("production" !== process.env.NODE_ENV) {
        switch (this.type) {
          case 'array':
            this.invariant(Array.isArray(value), 'Must be an array.', path);
            break;

          case 'custom':
          case 'instance':
          case 'union':
            break;

          case 'object':
          case 'shape':
            this.invariant((0, _isObject.default)(value), 'Must be a plain object.', path);
            break;

          default:
            this.invariant((0, _typeof2.default)(value) === this.type, "Must be a ".concat(this.type, "."), path);
            break;
        }
      }
    }
  }, {
    key: "custom",
    value: function custom(callback) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(typeof callback === 'function', 'Custom blueprints require a validation function.');
      }

      return this.addCheck(this.checkCustom, callback);
    }
  }, {
    key: "checkCustom",
    value: function checkCustom(path, value, callback) {
      if ("production" !== process.env.NODE_ENV) {
        try {
          callback(value, this.currentStruct);
        } catch (error) {
          this.invariant(false, error.message, path);
        }
      }
    }
  }, {
    key: "deprecate",
    value: function deprecate(message) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(typeof message === 'string' && !!message, 'A non-empty string is required for deprecated messages.');
        this.deprecatedMessage = message;
      }

      return this;
    }
  }, {
    key: "invariant",
    value: function invariant(condition, message) {
      var path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

      if ("production" !== process.env.NODE_ENV) {
        if (condition) {
          return;
        }

        var name = this.options.name;
        var prefix = '';

        if (path) {
          if (name) {
            prefix += "Invalid ".concat(name, " field \"").concat(path, "\". ");
          } else {
            prefix += "Invalid field \"".concat(path, "\". ");
          }
        } else if (name) {
          prefix += "".concat(name, ": ");
        }

        throw new Error("".concat(prefix).concat(this.errorMessage || message));
      }
    }
  }, {
    key: "key",
    value: function key(path) {
      var index = path.lastIndexOf('.');
      return index > 0 ? path.slice(index + 1) : path;
    }
  }, {
    key: "message",
    value: function message(_message) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(typeof _message === 'string' && !!_message, 'A non-empty string is required for custom messages.');
        this.errorMessage = _message;
      }

      return this;
    }
  }, {
    key: "nullable",
    value: function nullable() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if ("production" !== process.env.NODE_ENV) {
        this.isNullable = state;
      }

      return this;
    }
  }, {
    key: "only",
    value: function only() {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant((0, _typeof2.default)(this.defaultValue) === this.type, "Only requires a default ".concat(this.type, " value."));
      }

      return this.addCheck(this.checkOnly);
    }
  }, {
    key: "checkOnly",
    value: function checkOnly(path, value) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(value === this.defaultValue, "Value may only be \"".concat(String(this.defaultValue), "\"."), path);
      }
    }
  }, {
    key: "or",
    value: function or() {
      for (var _len3 = arguments.length, keys = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        keys[_key3] = arguments[_key3];
      }

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(keys.length > 0, 'OR requires a list of field names.');
      }

      return this.addCheck(this.checkOr, keys);
    }
  }, {
    key: "checkOr",
    value: function checkOr(path, value, otherKeys) {
      if ("production" !== process.env.NODE_ENV) {
        var keys = [this.key(path)].concat((0, _toConsumableArray2.default)(otherKeys));
        var struct = this.currentStruct;
        var defs = keys.filter(function (key) {
          return typeof struct[key] !== 'undefined' && struct[key] !== null;
        });
        this.invariant(defs.length > 0, "At least one of these fields must be defined: ".concat(keys.join(', ')));
      }
    }
  }, {
    key: "required",
    value: function required() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if ("production" !== process.env.NODE_ENV) {
        this.isRequired = state;
      }

      return this;
    }
  }, {
    key: "runChecks",
    value: function runChecks(path, initialValue, struct) {
      var _this = this;

      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      this.currentStruct = struct;
      this.options = options;
      var value = initialValue;

      if (typeof value === 'undefined') {
        if (!this.isRequired) {
          value = this.defaultValue;
        } else if ("production" !== process.env.NODE_ENV) {
          this.invariant(false, 'Field is required and must be defined.', path);
        }
      } else if (this.deprecatedMessage) {
        if ("production" !== process.env.NODE_ENV) {
          console.info("Field \"".concat(path, "\" is deprecated. ").concat(this.deprecatedMessage));
        }
      }

      if (value === null) {
        if (this.isNullable) {
          return value;
        }

        if ("production" !== process.env.NODE_ENV) {
          this.invariant(false, 'Null is not allowed.', path);
        }
      }

      if ("production" !== process.env.NODE_ENV) {
        this.checks.forEach(function (checker) {
          var _checker$callback;

          (_checker$callback = checker.callback).call.apply(_checker$callback, [_this, path, value].concat((0, _toConsumableArray2.default)(checker.args)));
        });
      }

      return value;
    }
  }, {
    key: "typeAlias",
    value: function typeAlias() {
      return this.type;
    }
  }, {
    key: "xor",
    value: function xor() {
      for (var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        keys[_key4] = arguments[_key4];
      }

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(keys.length > 0, 'XOR requires a list of field names.');
      }

      return this.addCheck(this.checkXor, keys);
    }
  }, {
    key: "checkXor",
    value: function checkXor(path, value, otherKeys) {
      if ("production" !== process.env.NODE_ENV) {
        var keys = [this.key(path)].concat((0, _toConsumableArray2.default)(otherKeys));
        var struct = this.currentStruct;
        var defs = keys.filter(function (key) {
          return typeof struct[key] !== 'undefined' && struct[key] !== null;
        });
        this.invariant(defs.length === 1, "Only one of these fields may be defined: ".concat(keys.join(', ')));
      }
    }
  }]);
  return Builder;
}();

exports.default = Builder;

function bool() {
  var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return new Builder('boolean', defaultValue);
}

function custom(callback) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return new Builder('custom', defaultValue).custom(callback);
}

function func() {
  var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  return new Builder('function', defaultValue).nullable();
}