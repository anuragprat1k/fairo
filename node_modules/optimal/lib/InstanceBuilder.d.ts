/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Builder from './Builder';
export declare type Constructor<T> = new (...args: any[]) => T;
export default class InstanceBuilder<T> extends Builder<T | null> {
    refClass: Constructor<T> | null;
    constructor(refClass?: Constructor<T> | null);
    checkInstance(path: string, value: any, refClass: T | null): void;
    /**
     * If reference class is defined, return the class name if available.
     */
    typeAlias(): string;
}
export declare function instance<T>(refClass?: Constructor<T> | null): InstanceBuilder<T>;
export declare function regex(): InstanceBuilder<RegExp>;
export declare function date(): InstanceBuilder<Date>;
