/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
import Builder from './Builder';
export default class CollectionBuilder<T, TDefault> extends Builder<TDefault | null> {
    contents: Builder<T> | null;
    constructor(type: 'array' | 'object', contents?: Builder<T> | null, defaultValue?: TDefault | null);
    checkContents(path: string, value: any, contents: Builder<T>): void;
    notEmpty(): this;
    checkNotEmpty(path: string, value: any): void;
    /**
     * If contents are defined, return the type name using generics syntax.
     */
    typeAlias(): string;
}
export declare function array<T>(contents?: Builder<T> | null, defaultValue?: T[] | null): CollectionBuilder<T, T[]>;
export declare function object<T>(contents?: Builder<T> | null, defaultValue?: {
    [key: string]: T;
} | null): CollectionBuilder<T, {
    [key: string]: T;
}>;
