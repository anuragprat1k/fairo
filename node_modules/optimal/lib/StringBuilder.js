"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.string = string;
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Builder2 = _interopRequireDefault(require("./Builder"));

/**
 * @copyright   2017-2019, Miles Johnson
 * @license     https://opensource.org/licenses/MIT
 */
function isString(value) {
  return typeof value === 'string' && value !== '';
}

var StringBuilder = function (_Builder) {
  (0, _inherits2.default)(StringBuilder, _Builder);

  function StringBuilder() {
    var _this;

    var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    (0, _classCallCheck2.default)(this, StringBuilder);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(StringBuilder).call(this, 'string', defaultValue));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "allowEmpty", false);

    if ("production" !== process.env.NODE_ENV) {
      _this.addCheck(_this.checkNotEmpty);
    }

    return _this;
  }

  (0, _createClass2.default)(StringBuilder, [{
    key: "contains",
    value: function contains(token) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(isString(token), 'Contains requires a non-empty string.');
      }

      return this.addCheck(this.checkContains, token, index);
    }
  }, {
    key: "checkContains",
    value: function checkContains(path, value, token) {
      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      if ("production" !== process.env.NODE_ENV) {
        this.invariant(value.indexOf(token, index) >= 0, "String does not include \"".concat(token, "\"."), path);
      }
    }
  }, {
    key: "match",
    value: function match(pattern) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(pattern instanceof RegExp, 'Match requires a regular expression to match against.');
      }

      return this.addCheck(this.checkMatch, pattern);
    }
  }, {
    key: "checkMatch",
    value: function checkMatch(path, value, pattern) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(value.match(pattern), "String does not match pattern \"".concat(pattern.source, "\"."), path);
      }
    }
  }, {
    key: "empty",
    value: function empty() {
      if ("production" !== process.env.NODE_ENV) {
        this.allowEmpty = true;
      }

      return this;
    }
  }, {
    key: "checkNotEmpty",
    value: function checkNotEmpty(path, value) {
      if ("production" !== process.env.NODE_ENV) {
        if (!this.allowEmpty) {
          this.invariant(isString(value), 'String cannot be empty.', path);
        }
      }
    }
  }, {
    key: "oneOf",
    value: function oneOf(list) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(Array.isArray(list) && list.length > 0 && list.every(function (item) {
          return isString(item);
        }), 'One of requires a non-empty array of strings.');
      }

      return this.addCheck(this.checkOneOf, list);
    }
  }, {
    key: "checkOneOf",
    value: function checkOneOf(path, value, list) {
      if ("production" !== process.env.NODE_ENV) {
        this.invariant(list.indexOf(value) >= 0, "String must be one of: ".concat(list.join(', ')), path);
      }
    }
  }]);
  return StringBuilder;
}(_Builder2.default);

exports.default = StringBuilder;

function string() {
  var defaultValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return new StringBuilder(defaultValue);
}